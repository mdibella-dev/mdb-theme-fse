/**
 * Do some magic
 *
 * @author  Marco Di Bella
 * @package mdb-theme-fse
 * @uses    anime.js
 */



// --------------------- SLIDEOUT



/**
 * doSlideout()
 *
 * @param open_or_close true: open; false: close
 */

function doSlideout( open_or_close ) {
    const body = document.querySelector( 'body' );

    if ( open_or_close == false ) {
        anime( {
            easing: 'easeInOutExpo',
            duration: 400,
            targets: '.site-component-slideout',
            right: '-100%'
        } );

        body.classList.remove( 'slideout-visible' );
    } else if ( open_or_close == true ) {

        anime( {
            easing: 'easeInOutExpo',
            duration: 400,
            targets: '.site-component-slideout',
            right: '0%'
        } );

        body.classList.add( 'slideout-visible' );
    }

    const hamburger_icon = document.querySelector( '.is-navbar-hamburger span' );
    hamburger_icon.classList.toggle( 'svg-symbol-hamburger' );
    hamburger_icon.classList.toggle( 'svg-symbol-hamburger-cross' );
}


/**
 * Event handler:
 * - on resize: close the slideout
 * - on click on trigger: open/close the slideout (depends on current state)
 */

// on resize
window.addEventListener( 'resize', (event) => {
    const body = document.querySelector( 'body' );

    if ( body.classList.contains( 'slideout-visible' ) ) {
        doSlideout( false );
    }
} );


// on click on trigger
document.querySelector( '.slideout-trigger' ).addEventListener( 'click', (event) => {
    const body = document.querySelector( 'body' );

    doSlideout( ! body.classList.contains( 'slideout-visible' ) );
} );



// --------------------- PAGENAVIGATION



/**
 * Event handler:
 * - by clicking on the link => do smooth scroll to anchor
 */

const pagenav_links = document.querySelectorAll( '.is-style-pagenavigation a.wp-block-navigation-item__content' );

pagenav_links.forEach( link => {
    link.addEventListener( 'click', function( e ) {

        // Isolate the target ID
        let full_url = this.href;
        let parts    = full_url.split( '#' );

        if ( parts.length == 2 ) {
            e.preventDefault();

            const anchor = document.getElementById( parts[1] ); // parts[1] => that's the ID
            let   offset = anchor.offsetTop;

            anime( {
                targets: '.wp-site-blocks',
                easing: 'easeInOutExpo',
                scrollTop: offset,
                duration: 1500
            } );
        }
    } );
} );



// --------------------- MASONRY



const masonry = document.querySelector( '.masonry' );

function doMasonry( masonry ) {
    let items = masonry.childElementCount;

    if ( items ) {

        const column_count     = getComputedStyle( masonry ).getPropertyValue( '--column-count' );
        const column_gap       = parseInt( getComputedStyle( masonry ).getPropertyValue( '--column-gap' ) );
        const items_per_column = Math.ceil( items / column_count );

        let   heights          = [];    // Field with the heights of the respective columns
        let   height           = 0;     // The calculated total height of the current column
        let   count            = 0;     // The number of items in the current column

        // Run through all child elements
        for ( const item of masonry.children ) {
            height += item.clientHeight + column_gap;
            items  -= 1;

            // 1. Has the maximum number of items in a column been reached?
            // 2. Have all items been processed?
            if ( ( count >= ( items_per_column - 1 ) ) || ( items == 0 ) ) {
                heights.push( height );
                height = 0;
                count  = 0;
            } else {
                count++;
            }
        }

        // Sort the heights in descending order
        heights.sort( (a,b) => b-a );

        // Set the new height
        masonry.style.height = heights[0] + 'px';
    }
}


doMasonry( masonry );
